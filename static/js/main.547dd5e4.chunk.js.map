{"version":3,"sources":["TodoListWithRedux/components/TodoList/TodoList.module.css","TodoListWithRedux/components/Task/Task.module.css","MyTodoList/components/AddItemForm/AddItemForm.module.css","TodoListWithRedux/store/todoListReducer.ts","TodoListWithRedux/components/EditableTextField/EditableTextField.tsx","TodoListWithRedux/components/Task/Task.tsx","TodoListWithRedux/store/selectors.ts","TodoListWithRedux/store/tasksReducer.ts","TodoListWithRedux/components/Task/TaskContainer.tsx","TodoListWithRedux/components/AddItemForm/AddItemForm.tsx","TodoListWithRedux/components/MyButton/MyButton.tsx","TodoListWithRedux/components/TodoList/TodoList.tsx","TodoListWithRedux/components/TodoList/TodoListContainer.tsx","App.tsx","serviceWorker.ts","TodoListWithRedux/store/store.ts","index.tsx"],"names":["module","exports","TodoListsActions","EditableTextField","props","title","onValueChange","useState","editMode","setEditMode","TextField","autoFocus","value","onChange","onBlur","onKeyPress","e","key","onDoubleClick","Task","todoListID","taskID","isDone","onTaskTitleChange","onStatusChange","onRemoveTask","className","s","task_item","completed","Checkbox","checked","color","currentTarget","IconButton","onClick","Delete","selectTodolistsState","state","todolists","selectTasksState","TasksActions","todoListID1","v1","todoListID2","initialState","todoLists","id","filter","TaskContainer","dispatch","useDispatch","tasksForTodoList","useSelector","tasks","t","newTaskStatus","type","CHANGE_TASK_STATUS","changeTaskStatus","REMOVE_TASK","removeTask","taskElement","map","newTaskTitle","CHANGE_TASK_TITLE","changeTaskTitle","AddItemForm","addItem","inputValue","setInputValue","error","setError","onAdd","trim","add_task","variant","newInputValue","label","helperText","size","AddBox","MyButton","name","todolistID","Button","TodoList","onRemoveList","onChangeTodoListTitle","onChangeTodoListFilter","Grid","item","Paper","elevation","style","borderRadius","padding","todo","list_header","list_header_title","text","taskTitle","ADD_TASK","addTask","list","filter_buttons","TodoListContainer","REMOVE_TODOLIST","removeTodoList","newFilter","CHANGE_TODOLIST_FILTER","changeTodoListFilter","todoListElements","tl","newTodoListTitle","CHANGE_TODOLIST_TITLE","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","maxWidth","container","alignItems","direction","todoListTitle","ADD_TODOLIST","spacing","justifyContent","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","newTodoList","newTask","stateCopy","store","createStore","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.547dd5e4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"TodoList_todo__2Yij9\",\"list_header\":\"TodoList_list_header__2FXyS\",\"list_header_title\":\"TodoList_list_header_title__2_myJ\",\"list\":\"TodoList_list__2791p\",\"filter_buttons\":\"TodoList_filter_buttons__ioJWn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task_item\":\"Task_task_item__1DZNc\",\"completed\":\"Task_completed__1Vwgc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"add_task\":\"AddItemForm_add_task__3XQzq\",\"add_input\":\"AddItemForm_add_input__8EBEd\",\"error_input\":\"AddItemForm_error_input__1uAwj\",\"add_button\":\"AddItemForm_add_button__3qxEO\",\"error_text\":\"AddItemForm_error_text__14fu_\"};","import {v1} from \"uuid\";\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\ntype InitialStateType = {\r\n    todoLists: Array<TodoListType>\r\n}\r\ntype TodoListType = {id: string, title: string, filter: FilterType}\r\n\r\nexport type AddTodoListActionType = ReturnType<typeof addTodoList>\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoList>\r\ntype ChangeTodoListFilterActionType = ReturnType<typeof changeTodoListFilter>\r\ntype ChangeTodoListTitleActionType = ReturnType<typeof changeTodoListTitle>\r\ntype TodoListsActionsType = AddTodoListActionType | RemoveTodoListActionType | ChangeTodoListFilterActionType | ChangeTodoListTitleActionType\r\n\r\nexport enum TodoListsActions {\r\n    ADD_TODOLIST = 'TODOLISTS/ADD_TODOLIST',\r\n    REMOVE_TODOLIST = 'TODOLISTS/REMOVE_TODOLIST',\r\n    CHANGE_TODOLIST_FILTER = 'TODOLISTS/CHANGE_TODOLIST_FILTER',\r\n    CHANGE_TODOLIST_TITLE = 'TODOLISTS/CHANGE_TODOLIST_TITLE',\r\n}\r\n\r\nexport const todoListID1: string = v1()\r\nexport const todoListID2: string = v1()\r\n\r\nconst initialState = {\r\n    todoLists: [\r\n        {id: todoListID1, title: 'What to learn', filter: 'all' as const},\r\n        {id: todoListID2, title: 'What to buy', filter: 'all' as const},\r\n    ]\r\n}\r\n\r\nexport const todoListReducer = (state: InitialStateType = initialState, action: TodoListsActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case TodoListsActions.ADD_TODOLIST:\r\n            const newTodoList: TodoListType = {id: action.todoListID, title: action.todoListTitle, filter: 'all'}\r\n            return {...state, todoLists: [...state.todoLists, newTodoList]}\r\n\r\n        case TodoListsActions.REMOVE_TODOLIST:\r\n            return {...state, todoLists: state.todoLists.filter(tl => tl.id !== action.todoListID)}\r\n\r\n        case TodoListsActions.CHANGE_TODOLIST_FILTER:\r\n            return {...state, todoLists: state.todoLists.map(tl => tl.id === action.todoListID ? {...tl, filter: action.newFilter} : tl)}\r\n\r\n        case TodoListsActions.CHANGE_TODOLIST_TITLE:\r\n            return {...state, todoLists: state.todoLists.map(tl => tl.id === action.todoListID ? {...tl, title: action.newTodoListTitle} : tl)}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTodoList = (todoListTitle: string) => {\r\n    return {\r\n        type: TodoListsActions.ADD_TODOLIST  as const,\r\n        todoListTitle: todoListTitle,\r\n        todoListID: v1()\r\n    }\r\n}\r\nexport const removeTodoList = (todoListID: string) => {\r\n    return {\r\n        type: TodoListsActions.REMOVE_TODOLIST  as const,\r\n        todoListID: todoListID\r\n    }\r\n}\r\nexport const changeTodoListFilter = (todoListID: string, newFilter: FilterType) => {\r\n    return {\r\n        type: TodoListsActions.CHANGE_TODOLIST_FILTER  as const,\r\n        todoListID: todoListID,\r\n        newFilter: newFilter,\r\n    }\r\n}\r\nexport const changeTodoListTitle = (todoListID: string, newTodoListTitle: string) => {\r\n    return {\r\n        type: TodoListsActions.CHANGE_TODOLIST_TITLE  as const,\r\n        todoListID: todoListID,\r\n        newTodoListTitle: newTodoListTitle,\r\n    }\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    todoListID?: string\r\n    taskID?: string\r\n    onValueChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const EditableTextField: React.FC<PropsType> = (props) => {\r\n\r\n    const {title, onValueChange} = props\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onEditBlur = () => {\r\n        setEditMode(false)\r\n    }\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const onEnterPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <TextField\r\n                    autoFocus\r\n                    value={title}\r\n                    onChange={onValueChange}\r\n                    onBlur={onEditBlur}\r\n                    onKeyPress={onEnterPress}\r\n                />\r\n                : <span onDoubleClick={onEditMode}>{title}</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './Task.module.css'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {EditableTextField} from \"../EditableTextField/EditableTextField\";\r\n\r\ntype  PropsType = {\r\n    todoListID: string\r\n    taskID: string\r\n    title: string\r\n    isDone: boolean\r\n    onTaskTitleChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onStatusChange: (todoListID: string, taskID: string, newTaskStatus: boolean) => void\r\n    onRemoveTask: (todoListID: string, taskID: string) => void\r\n}\r\n\r\nexport const Task: React.FC<PropsType> = (props) => {\r\n\r\n    const {todoListID, taskID, title, isDone, onTaskTitleChange, onStatusChange, onRemoveTask} = props\r\n\r\n    return (\r\n        <li className={s.task_item + ' ' + (isDone && s.completed)}>\r\n            <Checkbox\r\n                checked={isDone}\r\n                color={\"primary\"}\r\n                onChange={(e) => onStatusChange(todoListID, taskID, e.currentTarget.checked)}\r\n            />\r\n            <EditableTextField title={title} onValueChange={onTaskTitleChange} taskID={taskID} todoListID={todoListID} />\r\n            <IconButton onClick={() => onRemoveTask(todoListID, taskID)}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n}","import {AppStateType} from \"./store\";\r\n\r\nexport const selectTodolistsState = (state: AppStateType) => state.todolists\r\nexport const selectTasksState = (state: AppStateType) => state","import {v1} from \"uuid\";\r\nimport {\r\n    AddTodoListActionType,\r\n    RemoveTodoListActionType,\r\n    todoListID1,\r\n    todoListID2,\r\n    TodoListsActions\r\n} from \"./todoListReducer\";\r\n\r\ntype InitialStateType = typeof initialState\r\ntype TaskType = { id: string, title: string, isDone: boolean }\r\n\r\ntype AddTaskActionType = ReturnType<typeof addTask>\r\ntype RemoveTaskActionType = ReturnType<typeof removeTask>\r\ntype ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatus>\r\ntype ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitle>\r\ntype TasksActionsType =\r\n    AddTaskActionType\r\n    | RemoveTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n\r\nexport enum TasksActions {\r\n    ADD_TASK = 'TASKS/ADD_TASK',\r\n    REMOVE_TASK = 'TASKS/REMOVE_TASK',\r\n    CHANGE_TASK_STATUS = 'TASKS/CHANGE_TASK_STATUS',\r\n    CHANGE_TASK_TITLE = 'TASKS/CHANGE_TASK_TITLE',\r\n}\r\n\r\nconst initialState = {\r\n    [todoListID1]: [\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"ReactJS\", isDone: false},\r\n        {id: v1(), title: \"Rest API\", isDone: false},\r\n        {id: v1(), title: \"GraphQL\", isDone: false},\r\n    ],\r\n    [todoListID2]: [\r\n        {id: v1(), title: \"Milk\", isDone: true},\r\n        {id: v1(), title: \"Bread\", isDone: true},\r\n        {id: v1(), title: \"Sugar\", isDone: false},\r\n        {id: v1(), title: \"Oil\", isDone: false},\r\n        {id: v1(), title: \"Salt\", isDone: false},\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: InitialStateType = initialState, action: TasksActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case TasksActions.ADD_TASK:\r\n            const newTask: TaskType = {id: v1(), title: action.taskTitle, isDone: false}\r\n            return {...state, [action.todoListID]: [newTask, ...state[action.todoListID]]}\r\n\r\n        case TasksActions.REMOVE_TASK:\r\n            return {...state, [action.todoListID]: state[action.todoListID].filter(t => t.id !== action.taskID)}\r\n\r\n        case TasksActions.CHANGE_TASK_STATUS:\r\n            return {...state,\r\n                [action.todoListID]: state[action.todoListID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    isDone: action.newTaskStatus\r\n                } : t)\r\n            }\r\n\r\n        case TasksActions.CHANGE_TASK_TITLE:\r\n            return {...state,\r\n                [action.todoListID]: state[action.todoListID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    title: action.newTaskTitle\r\n                } : t)\r\n            }\r\n\r\n        case TodoListsActions.ADD_TODOLIST:\r\n            return {...state, [action.todoListID]: []}\r\n\r\n        case TodoListsActions.REMOVE_TODOLIST:\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListID]\r\n            return stateCopy\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTask = (todoListID: string, taskTitle: string) => {\r\n    return {\r\n        type: TasksActions.ADD_TASK as const,\r\n        todoListID: todoListID,\r\n        taskTitle: taskTitle,\r\n    }\r\n}\r\nexport const removeTask = (todoListID: string, taskID: string) => {\r\n    return {\r\n        type: TasksActions.REMOVE_TASK as const,\r\n        todoListID: todoListID,\r\n        taskID: taskID,\r\n    }\r\n}\r\nexport const changeTaskStatus = (todoListID: string, taskID: string, newTaskStatus: boolean) => {\r\n    return {\r\n        type: TasksActions.CHANGE_TASK_STATUS as const,\r\n        todoListID: todoListID,\r\n        taskID: taskID,\r\n        newTaskStatus: newTaskStatus,\r\n    }\r\n}\r\nexport const changeTaskTitle = (todoListID: string, taskID: string, newTaskTitle: string) => {\r\n    return {\r\n        type: TasksActions.CHANGE_TASK_TITLE as const,\r\n        todoListID: todoListID,\r\n        taskID: taskID,\r\n        newTaskTitle: newTaskTitle,\r\n    }\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {Task} from \"./Task\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {selectTasksState} from \"../../store/selectors\";\r\nimport {changeTaskStatus, changeTaskTitle, removeTask} from \"../../store/tasksReducer\";\r\nimport {FilterType} from \"../../store/todoListReducer\";\r\n\r\nexport const TaskContainer = (props: { todoListID: string, filter: FilterType }) => {\r\n\r\n    const {todoListID, filter} = props\r\n\r\n    const dispatch = useDispatch<Dispatch>()\r\n    const {tasks} = useSelector(selectTasksState)\r\n    let tasksForTodoList = tasks[todoListID]\r\n    if (filter === 'completed') tasksForTodoList = tasksForTodoList.filter(t => t.isDone)\r\n    if (filter === 'active') tasksForTodoList = tasksForTodoList.filter(t => !t.isDone)\r\n\r\n    const onStatusChange = (todoListID: string, taskID: string, newTaskStatus: boolean) => {\r\n        dispatch(changeTaskStatus(todoListID, taskID, newTaskStatus))\r\n    }\r\n    const onRemoveTask = (todoListID: string, taskID: string) => {\r\n        dispatch(removeTask(todoListID, taskID))\r\n    }\r\n\r\n    const taskElement = tasksForTodoList.map(t => {\r\n        const onTaskTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n            dispatch(changeTaskTitle(todoListID, t.id, e.currentTarget.value))\r\n        }\r\n        return <Task key={t.id}\r\n                     todoListID={todoListID}\r\n                     taskID={t.id}\r\n                     title={t.title}\r\n                     isDone={t.isDone}\r\n                     onTaskTitleChange={onTaskTitleChange}\r\n                     onStatusChange={onStatusChange}\r\n                     onRemoveTask={onRemoveTask}\r\n        />\r\n    })\r\n\r\n    return (\r\n\r\n        <>\r\n            {taskElement}\r\n        </>\r\n\r\n    )\r\n}","import s from \"../../../MyTodoList/components/AddItemForm/AddItemForm.module.css\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport React, {useState} from \"react\";\r\n\r\ntype PropsType ={\r\n    addItem: (text: string) => void\r\n}\r\n\r\nexport const AddItemForm: React.FC<PropsType> = (props) => {\r\n\r\n    const {addItem} = props\r\n\r\n    const [inputValue, setInputValue] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n\r\n    const onAdd = () => {\r\n        if (inputValue.trim()) {\r\n            addItem(inputValue.trim())\r\n            setInputValue('')\r\n        } else {\r\n            setError('Введите текст')\r\n        }\r\n    }\r\n\r\n    const onEnterPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === 'Enter' ? onAdd() : setError('Введите текст')\r\n    }\r\n\r\n    const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        const newInputValue = e.currentTarget.value\r\n        setInputValue(newInputValue)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.add_task}>\r\n                <TextField\r\n                    variant={\"outlined\"}\r\n                    value={inputValue}\r\n                    onChange={onInputChange}\r\n                    onKeyPress={onEnterPress}\r\n                    error={!!error}\r\n                    label={\"Enter title\"}\r\n                    helperText={error}\r\n                    size={\"small\"}\r\n                />\r\n                <IconButton\r\n                    onClick={onAdd}\r\n                    color={\"primary\"}\r\n                >\r\n                    <AddBox />\r\n                </IconButton>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {FilterType} from \"../../store/todoListReducer\";\r\n\r\ntype PropsType = {\r\n    name: FilterType\r\n    onClick: (todolistID: string, filter: FilterType) => void\r\n    todolistID: string\r\n    filter: FilterType\r\n}\r\n\r\nexport const MyButton: React.FC<PropsType> = (props) => {\r\n\r\n    const {name, filter, todolistID, onClick} = props\r\n\r\n    const onClickHandler = () => {\r\n        onClick(todolistID, name);\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            onClick={onClickHandler}\r\n            variant={\"contained\"}\r\n            color={filter === name ? \"secondary\" : \"primary\"}\r\n        >{name}\r\n        </Button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterType} from \"../../store/todoListReducer\";\r\nimport s from './TodoList.module.css';\r\nimport {Grid, IconButton, Paper} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskContainer} from \"../Task/TaskContainer\";\r\nimport {EditableTextField} from \"../EditableTextField/EditableTextField\";\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTask} from \"../../store/tasksReducer\";\r\nimport {MyButton} from \"../MyButton/MyButton\";\r\n\r\ntype PropsType = {\r\n    todoListID: string\r\n    title: string\r\n    filter: FilterType\r\n    onRemoveList: (todoListID: string) => void\r\n    onChangeTodoListTitle: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeTodoListFilter: (todoListID: string, newFilter: FilterType) => void\r\n}\r\n\r\nexport const TodoList: React.FC<PropsType> = (props) => {\r\n\r\n    const {todoListID, title, filter, onRemoveList, onChangeTodoListTitle, onChangeTodoListFilter} = props\r\n    const dispatch = useDispatch()\r\n\r\n    const onAddTask = (text: string) => {\r\n        dispatch(addTask(todoListID, text))\r\n    }\r\n\r\n    return (\r\n        <Grid item>\r\n            <Paper elevation={6} style={{borderRadius: '10px', padding: '10px'}}>\r\n                <div className={s.todo}>\r\n                    <div className={s.list_header}>\r\n                        <h3 className={s.list_header_title}>\r\n                            <EditableTextField todoListID={todoListID} title={title}\r\n                                               onValueChange={onChangeTodoListTitle}/>\r\n                        </h3>\r\n                        <IconButton onClick={() => onRemoveList(todoListID)}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </div>\r\n                    <AddItemForm addItem={onAddTask}/>\r\n                    <ul className={s.list}>\r\n                        <TaskContainer todoListID={todoListID} filter={filter}/>\r\n                    </ul>\r\n                    <div className={s.filter_buttons}>\r\n                        <MyButton name={'all'} onClick={onChangeTodoListFilter} todolistID={todoListID}\r\n                                  filter={filter}/>\r\n                        <MyButton name={'active'} onClick={onChangeTodoListFilter} todolistID={todoListID}\r\n                                  filter={filter}/>\r\n                        <MyButton name={'completed'} onClick={onChangeTodoListFilter} todolistID={todoListID}\r\n                                  filter={filter}/>\r\n                    </div>\r\n                </div>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {Dispatch} from \"redux\";\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {TodoList} from \"./TodoList\";\r\nimport {selectTodolistsState} from \"../../store/selectors\";\r\nimport {\r\n    changeTodoListFilter,\r\n    changeTodoListTitle,\r\n    FilterType,\r\n    removeTodoList\r\n} from \"../../store/todoListReducer\";\r\n\r\nexport const TodoListContainer = () => {\r\n\r\n    const dispatch = useDispatch<Dispatch>()\r\n    const {todoLists} = useSelector(selectTodolistsState)\r\n\r\n    const onRemoveList = (todoListID: string) => {\r\n        dispatch(removeTodoList(todoListID))\r\n    }\r\n    const onChangeTodoListFilter = (todoListID: string, newFilter: FilterType) => {\r\n        dispatch(changeTodoListFilter(todoListID, newFilter))\r\n    }\r\n\r\n    const todoListElements = todoLists.map(tl => {\r\n        const onChangeTodoListTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n            dispatch(changeTodoListTitle(tl.id, e.currentTarget.value))\r\n        }\r\n        return <TodoList key={tl.id}\r\n                         todoListID={tl.id}\r\n                         title={tl.title}\r\n                         filter={tl.filter}\r\n                         onRemoveList={onRemoveList}\r\n                         onChangeTodoListTitle={onChangeTodoListTitle}\r\n                         onChangeTodoListFilter={onChangeTodoListFilter}\r\n        />\r\n    })\r\n\r\n    return (\r\n\r\n        <>\r\n            {todoListElements}\r\n        </>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodoListContainer} from \"./TodoListWithRedux/components/TodoList/TodoListContainer\";\r\nimport {AddItemForm} from \"./TodoListWithRedux/components/AddItemForm/AddItemForm\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTodoList} from \"./TodoListWithRedux/store/todoListReducer\";\r\n\r\nexport const App = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onAddTodoList = (text: string) => {\r\n        dispatch(addTodoList(text))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar>\r\n                    <IconButton edge={\"start\"} color={\"inherit\"} aria-label={\"menu\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        Menu\r\n                    </Typography>\r\n                    <Button color={\"inherit\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed maxWidth={\"xl\"}>\r\n                <Grid container style={{padding: \"10px\"}} alignItems={\"center\"} direction={\"column\"} >\r\n                    <h4>Add new todolist</h4>\r\n                    <i>Enter todolist name</i>\r\n                    <AddItemForm addItem={onAddTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3} justifyContent={\"center\"}>\r\n                    <TodoListContainer/>\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {todoListReducer} from \"./todoListReducer\";\r\nimport {combineReducers, createStore} from 'redux'\r\nimport {tasksReducer} from \"./tasksReducer\";\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todoListReducer,\r\n    tasks: tasksReducer,\r\n})\r\nexport const store = createStore(rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store.getState()\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import {Main} from \"./MyTodoList/components/Main/Main\";\r\nimport {Provider} from 'react-redux'\r\nimport {store} from \"./TodoListWithRedux/store/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n// ReactDOM.render(<Main />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}